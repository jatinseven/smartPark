#!/usr/bin/python
import I2C_LCD_driver
from time import *
import time
import RPi.GPIO as GPIO
import os,sys
from urllib.parse import urlparse
import paho.mqtt.client as paho
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

# Timing constants
E_PULSE = 0.0005
E_DELAY = 0.0005
delay = 1

lcdDisplay = I2C_LCD_driver.lcd()

# Define GPIO mapping
slot1_trig = 23 #pin 16
slot1_echo = 24 #pin 18
slot2_trig = 20 #pin 38
slot2_echo = 21 #pin 40
LED1_Red = 5 #pin 29
LED1_Green = 6 #pin 31
LED2_Red = 17 #pin 11
LED2_Green = 27 #pin 13
GPIO.setup(slot1_trig, GPIO.OUT)
GPIO.setup(slot1_echo, GPIO.IN)
GPIO.setup(slot2_trig, GPIO.OUT)
GPIO.setup(slot2_echo, GPIO.IN)
GPIO.setup(LED1_Red, GPIO.OUT)
GPIO.setup(LED1_Green, GPIO.OUT)
GPIO.setup(LED2_Red, GPIO.OUT)
GPIO.setup(LED2_Green, GPIO.OUT)

def on_connect(self, mosq, obj, rc):
    self.subscribe("Fan", 0)
    
def on_publish(mosq, obj, mid):
    print("mid: " + str(mid))

mqttc = paho.Client()                        # object declaration
# Assign event callbacks
mqttc.on_connect = on_connect
mqttc.on_publish = on_publish

url_str = os.environ.get('CLOUDMQTT_URL', 'tcp://broker.emqx.io:1883') 
url = urlparse(url_str)
mqttc.connect(url.hostname, url.port)

lcdDisplay.lcd_display_string("Smart Parking", 1)
lcdDisplay.lcd_display_string("System", 2)


delay = 5

while 1:
  # Print out results
  rc = mqttc.loop()
  GPIO.output(slot1_trig, False)
  time.sleep(0.2)
  GPIO.output(slot1_trig, True)
  time.sleep(0.00001)
  GPIO.output(slot1_trig, False)

  while GPIO.input(slot1_echo)==0:
    pulse_start_slot1=time.time()
  while GPIO.input(slot1_echo)==1:
    pulse_end_slot1=time.time()
  pulse_duration_slot1=pulse_end_slot1-pulse_start_slot1
  distance_slot1=pulse_duration_slot1*17150
  distance_slot1=round(distance_slot1,2)

  GPIO.output(slot2_trig, False)
  time.sleep(0.2)
  GPIO.output(slot2_trig, True)
  time.sleep(0.00001)
  GPIO.output(slot2_trig, False)

  while GPIO.input(slot2_echo)==0:
    pulse_start_slot2=time.time()
  while GPIO.input(slot2_echo)==1:
    pulse_end_slot2=time.time()
  pulse_duration_slot2=pulse_end_slot2-pulse_start_slot2
  distance_slot2=pulse_duration_slot2*17150
  distance_slot2=round(distance_slot2,2)

  if distance_slot1 <= 12:
    lcdDisplay.lcd_display_string("Slot 1 Parked", 1)
    mqttc.publish("slot1","1")
    GPIO.output(LED1_Green, False)
    GPIO.output(LED1_Red, True)
    time.sleep(0.2)
  else:
    lcdDisplay.lcd_display_string("Slot 1 Free  ", 1)
    mqttc.publish("slot1","0")
    GPIO.output(LED1_Red, False)
    GPIO.output(LED1_Green, True)
    time.sleep(0.2)
    
  if distance_slot2 <= 12:
    lcdDisplay.lcd_display_string("Slot 2 Parked  ", 2)
    mqttc.publish("slot2","1")
    GPIO.output(LED2_Green, False)
    GPIO.output(LED2_Red, True)
    time.sleep(0.2)
  else:
    lcdDisplay.lcd_display_string("Slot 2 Free  ", 2)
    mqttc.publish("slot2","0")
    GPIO.output(LED2_Red, False)
    GPIO.output(LED2_Green, True)
    time.sleep(0.2)
